/*
 * Open Payments
 * The Open Payments API is a simple REST API with 4 resource types: **wallet address**, **quote**, **incoming payment** and **outgoing payment**.  The *service endpoint* for the API is always the URL of the wallet address resource and all other resources are sub-resources of the wallet address.  An incoming payment defines meta data that is automatically attached to payments made into the wallet address under that incoming payment. This facilitates automation of processes like reconciliation of payment into the wallet address with external systems.  An outgoing payment is an instruction to make a payment out of the wallet address.  A quote is a commitment from the Account Servicing Entity to deliver a particular amount to a receiver when sending a particular amount from the wallet address. It is only valid for a limited time.  All resource and collection resource representations use JSON and the media-type `application/json`.    The `wallet address` resource has three collections of sub-resources: 1. `/incoming-payments` contains the **incoming payment** sub-resources   2. `/outgoing-payments` contains the **outgoing payment** sub-resources   3. `/quotes` contains the **quote** sub-resources  Access to resources and permission to execute the methods exposed by the API is determined by the grants given to the client represented by an access token used in API requests.
 *
 * The version of the OpenAPI document: 1.4
 * Contact: tech@interledger.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fliqa.interledger.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.fliqa.interledger.ApiClient;
/**
 * 
 */
@JsonPropertyOrder({
  PageInfo.JSON_PROPERTY_START_CURSOR,
  PageInfo.JSON_PROPERTY_END_CURSOR,
  PageInfo.JSON_PROPERTY_HAS_NEXT_PAGE,
  PageInfo.JSON_PROPERTY_HAS_PREVIOUS_PAGE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class PageInfo {
  public static final String JSON_PROPERTY_START_CURSOR = "startCursor";
  @javax.annotation.Nullable
  private String startCursor;

  public static final String JSON_PROPERTY_END_CURSOR = "endCursor";
  @javax.annotation.Nullable
  private String endCursor;

  public static final String JSON_PROPERTY_HAS_NEXT_PAGE = "hasNextPage";
  @javax.annotation.Nonnull
  private Boolean hasNextPage;

  public static final String JSON_PROPERTY_HAS_PREVIOUS_PAGE = "hasPreviousPage";
  @javax.annotation.Nonnull
  private Boolean hasPreviousPage;

  public PageInfo() { 
  }

  public PageInfo startCursor(@javax.annotation.Nullable String startCursor) {
    this.startCursor = startCursor;
    return this;
  }

  /**
   * Cursor corresponding to the first element in the result array.
   * @return startCursor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_START_CURSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getStartCursor() {
    return startCursor;
  }


  @JsonProperty(JSON_PROPERTY_START_CURSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setStartCursor(@javax.annotation.Nullable String startCursor) {
    this.startCursor = startCursor;
  }


  public PageInfo endCursor(@javax.annotation.Nullable String endCursor) {
    this.endCursor = endCursor;
    return this;
  }

  /**
   * Cursor corresponding to the last element in the result array.
   * @return endCursor
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_END_CURSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getEndCursor() {
    return endCursor;
  }


  @JsonProperty(JSON_PROPERTY_END_CURSOR)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setEndCursor(@javax.annotation.Nullable String endCursor) {
    this.endCursor = endCursor;
  }


  public PageInfo hasNextPage(@javax.annotation.Nonnull Boolean hasNextPage) {
    this.hasNextPage = hasNextPage;
    return this;
  }

  /**
   * Describes whether the data set has further entries.
   * @return hasNextPage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_NEXT_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getHasNextPage() {
    return hasNextPage;
  }


  @JsonProperty(JSON_PROPERTY_HAS_NEXT_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasNextPage(@javax.annotation.Nonnull Boolean hasNextPage) {
    this.hasNextPage = hasNextPage;
  }


  public PageInfo hasPreviousPage(@javax.annotation.Nonnull Boolean hasPreviousPage) {
    this.hasPreviousPage = hasPreviousPage;
    return this;
  }

  /**
   * Describes whether the data set has previous entries.
   * @return hasPreviousPage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_HAS_PREVIOUS_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getHasPreviousPage() {
    return hasPreviousPage;
  }


  @JsonProperty(JSON_PROPERTY_HAS_PREVIOUS_PAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setHasPreviousPage(@javax.annotation.Nonnull Boolean hasPreviousPage) {
    this.hasPreviousPage = hasPreviousPage;
  }


  /**
   * Return true if this page-info object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PageInfo pageInfo = (PageInfo) o;
    return Objects.equals(this.startCursor, pageInfo.startCursor) &&
        Objects.equals(this.endCursor, pageInfo.endCursor) &&
        Objects.equals(this.hasNextPage, pageInfo.hasNextPage) &&
        Objects.equals(this.hasPreviousPage, pageInfo.hasPreviousPage);
  }

  @Override
  public int hashCode() {
    return Objects.hash(startCursor, endCursor, hasNextPage, hasPreviousPage);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PageInfo {\n");
    sb.append("    startCursor: ").append(toIndentedString(startCursor)).append("\n");
    sb.append("    endCursor: ").append(toIndentedString(endCursor)).append("\n");
    sb.append("    hasNextPage: ").append(toIndentedString(hasNextPage)).append("\n");
    sb.append("    hasPreviousPage: ").append(toIndentedString(hasPreviousPage)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `startCursor` to the URL query string
    if (getStartCursor() != null) {
      joiner.add(String.format("%sstartCursor%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getStartCursor()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `endCursor` to the URL query string
    if (getEndCursor() != null) {
      joiner.add(String.format("%sendCursor%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getEndCursor()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hasNextPage` to the URL query string
    if (getHasNextPage() != null) {
      joiner.add(String.format("%shasNextPage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHasNextPage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `hasPreviousPage` to the URL query string
    if (getHasPreviousPage() != null) {
      joiner.add(String.format("%shasPreviousPage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getHasPreviousPage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

