/*
 * Wallet Address API
 * The Wallet Address API is a simple REST API to get basic details about a wallet address.
 *
 * The version of the OpenAPI document: 1.4
 * Contact: tech@interledger.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fliqa.interledger.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.fliqa.interledger.ApiClient;
/**
 * A JWK representation of an Ed25519 Public Key
 */
@JsonPropertyOrder({
  JsonWebKey.JSON_PROPERTY_KID,
  JsonWebKey.JSON_PROPERTY_ALG,
  JsonWebKey.JSON_PROPERTY_USE,
  JsonWebKey.JSON_PROPERTY_KTY,
  JsonWebKey.JSON_PROPERTY_CRV,
  JsonWebKey.JSON_PROPERTY_X
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class JsonWebKey {
  public static final String JSON_PROPERTY_KID = "kid";
  @javax.annotation.Nonnull
  private String kid;

  /**
   * The cryptographic algorithm family used with the key. The only allowed value is &#x60;EdDSA&#x60;. 
   */
  public enum AlgEnum {
    ED_DSA(String.valueOf("EdDSA"));

    private String value;

    AlgEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static AlgEnum fromValue(String value) {
      for (AlgEnum b : AlgEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_ALG = "alg";
  @javax.annotation.Nonnull
  private AlgEnum alg;

  /**
   * Gets or Sets use
   */
  public enum UseEnum {
    SIG(String.valueOf("sig"));

    private String value;

    UseEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static UseEnum fromValue(String value) {
      for (UseEnum b : UseEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_USE = "use";
  @javax.annotation.Nullable
  private UseEnum use;

  /**
   * Gets or Sets kty
   */
  public enum KtyEnum {
    OKP(String.valueOf("OKP"));

    private String value;

    KtyEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static KtyEnum fromValue(String value) {
      for (KtyEnum b : KtyEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_KTY = "kty";
  @javax.annotation.Nonnull
  private KtyEnum kty;

  /**
   * Gets or Sets crv
   */
  public enum CrvEnum {
    ED25519(String.valueOf("Ed25519"));

    private String value;

    CrvEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static CrvEnum fromValue(String value) {
      for (CrvEnum b : CrvEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_CRV = "crv";
  @javax.annotation.Nonnull
  private CrvEnum crv;

  public static final String JSON_PROPERTY_X = "x";
  @javax.annotation.Nonnull
  private String x;

  public JsonWebKey() { 
  }

  public JsonWebKey kid(@javax.annotation.Nonnull String kid) {
    this.kid = kid;
    return this;
  }

  /**
   * Get kid
   * @return kid
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getKid() {
    return kid;
  }


  @JsonProperty(JSON_PROPERTY_KID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKid(@javax.annotation.Nonnull String kid) {
    this.kid = kid;
  }


  public JsonWebKey alg(@javax.annotation.Nonnull AlgEnum alg) {
    this.alg = alg;
    return this;
  }

  /**
   * The cryptographic algorithm family used with the key. The only allowed value is &#x60;EdDSA&#x60;. 
   * @return alg
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ALG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public AlgEnum getAlg() {
    return alg;
  }


  @JsonProperty(JSON_PROPERTY_ALG)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAlg(@javax.annotation.Nonnull AlgEnum alg) {
    this.alg = alg;
  }


  public JsonWebKey use(@javax.annotation.Nullable UseEnum use) {
    this.use = use;
    return this;
  }

  /**
   * Get use
   * @return use
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public UseEnum getUse() {
    return use;
  }


  @JsonProperty(JSON_PROPERTY_USE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setUse(@javax.annotation.Nullable UseEnum use) {
    this.use = use;
  }


  public JsonWebKey kty(@javax.annotation.Nonnull KtyEnum kty) {
    this.kty = kty;
    return this;
  }

  /**
   * Get kty
   * @return kty
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_KTY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public KtyEnum getKty() {
    return kty;
  }


  @JsonProperty(JSON_PROPERTY_KTY)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setKty(@javax.annotation.Nonnull KtyEnum kty) {
    this.kty = kty;
  }


  public JsonWebKey crv(@javax.annotation.Nonnull CrvEnum crv) {
    this.crv = crv;
    return this;
  }

  /**
   * Get crv
   * @return crv
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CRV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public CrvEnum getCrv() {
    return crv;
  }


  @JsonProperty(JSON_PROPERTY_CRV)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCrv(@javax.annotation.Nonnull CrvEnum crv) {
    this.crv = crv;
  }


  public JsonWebKey x(@javax.annotation.Nonnull String x) {
    this.x = x;
    return this;
  }

  /**
   * The base64 url-encoded public key.
   * @return x
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_X)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getX() {
    return x;
  }


  @JsonProperty(JSON_PROPERTY_X)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setX(@javax.annotation.Nonnull String x) {
    this.x = x;
  }


  /**
   * Return true if this json-web-key object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    JsonWebKey jsonWebKey = (JsonWebKey) o;
    return Objects.equals(this.kid, jsonWebKey.kid) &&
        Objects.equals(this.alg, jsonWebKey.alg) &&
        Objects.equals(this.use, jsonWebKey.use) &&
        Objects.equals(this.kty, jsonWebKey.kty) &&
        Objects.equals(this.crv, jsonWebKey.crv) &&
        Objects.equals(this.x, jsonWebKey.x);
  }

  @Override
  public int hashCode() {
    return Objects.hash(kid, alg, use, kty, crv, x);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class JsonWebKey {\n");
    sb.append("    kid: ").append(toIndentedString(kid)).append("\n");
    sb.append("    alg: ").append(toIndentedString(alg)).append("\n");
    sb.append("    use: ").append(toIndentedString(use)).append("\n");
    sb.append("    kty: ").append(toIndentedString(kty)).append("\n");
    sb.append("    crv: ").append(toIndentedString(crv)).append("\n");
    sb.append("    x: ").append(toIndentedString(x)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `kid` to the URL query string
    if (getKid() != null) {
      joiner.add(String.format("%skid%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getKid()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `alg` to the URL query string
    if (getAlg() != null) {
      joiner.add(String.format("%salg%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getAlg()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `use` to the URL query string
    if (getUse() != null) {
      joiner.add(String.format("%suse%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUse()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `kty` to the URL query string
    if (getKty() != null) {
      joiner.add(String.format("%skty%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getKty()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `crv` to the URL query string
    if (getCrv() != null) {
      joiner.add(String.format("%scrv%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCrv()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `x` to the URL query string
    if (getX() != null) {
      joiner.add(String.format("%sx%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getX()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

