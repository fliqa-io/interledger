/*
 * Open Payments
 * The Open Payments API is a simple REST API with 4 resource types: **wallet address**, **quote**, **incoming payment** and **outgoing payment**.  The *service endpoint* for the API is always the URL of the wallet address resource and all other resources are sub-resources of the wallet address.  An incoming payment defines meta data that is automatically attached to payments made into the wallet address under that incoming payment. This facilitates automation of processes like reconciliation of payment into the wallet address with external systems.  An outgoing payment is an instruction to make a payment out of the wallet address.  A quote is a commitment from the Account Servicing Entity to deliver a particular amount to a receiver when sending a particular amount from the wallet address. It is only valid for a limited time.  All resource and collection resource representations use JSON and the media-type `application/json`.    The `wallet address` resource has three collections of sub-resources: 1. `/incoming-payments` contains the **incoming payment** sub-resources   2. `/outgoing-payments` contains the **outgoing payment** sub-resources   3. `/quotes` contains the **quote** sub-resources  Access to resources and permission to execute the methods exposed by the API is determined by the grants given to the client represented by an access token used in API requests.
 *
 * The version of the OpenAPI document: 1.4
 * Contact: tech@interledger.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fliqa.interledger.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fliqa.interledger.client.model.Amount1;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.fliqa.interledger.ApiClient;
/**
 * An **incoming payment** resource represents a payment that will be, is currently being, or has been received by the account.
 */
@JsonPropertyOrder({
  IncomingPayment.JSON_PROPERTY_ID,
  IncomingPayment.JSON_PROPERTY_WALLET_ADDRESS,
  IncomingPayment.JSON_PROPERTY_COMPLETED,
  IncomingPayment.JSON_PROPERTY_INCOMING_AMOUNT,
  IncomingPayment.JSON_PROPERTY_RECEIVED_AMOUNT,
  IncomingPayment.JSON_PROPERTY_EXPIRES_AT,
  IncomingPayment.JSON_PROPERTY_METADATA,
  IncomingPayment.JSON_PROPERTY_CREATED_AT,
  IncomingPayment.JSON_PROPERTY_UPDATED_AT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class IncomingPayment {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private URI id;

  public static final String JSON_PROPERTY_WALLET_ADDRESS = "walletAddress";
  @javax.annotation.Nonnull
  private URI walletAddress;

  public static final String JSON_PROPERTY_COMPLETED = "completed";
  @javax.annotation.Nonnull
  private Boolean completed = false;

  public static final String JSON_PROPERTY_INCOMING_AMOUNT = "incomingAmount";
  @javax.annotation.Nullable
  private Amount1 incomingAmount;

  public static final String JSON_PROPERTY_RECEIVED_AMOUNT = "receivedAmount";
  @javax.annotation.Nonnull
  private Amount1 receivedAmount;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expiresAt";
  @javax.annotation.Nullable
  private OffsetDateTime expiresAt;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nullable
  private Object metadata;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public IncomingPayment() { 
  }

  @JsonCreator
  public IncomingPayment(
    @JsonProperty(JSON_PROPERTY_ID) URI id, 
    @JsonProperty(JSON_PROPERTY_WALLET_ADDRESS) URI walletAddress
  ) {
  this();
    this.id = id;
    this.walletAddress = walletAddress;
  }

  /**
   * The URL identifying the incoming payment.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getId() {
    return id;
  }




  /**
   * The URL of the wallet address this payment is being made into.
   * @return walletAddress
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WALLET_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getWalletAddress() {
    return walletAddress;
  }




  public IncomingPayment completed(@javax.annotation.Nonnull Boolean completed) {
    this.completed = completed;
    return this;
  }

  /**
   * Describes whether the incoming payment has completed receiving fund.
   * @return completed
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_COMPLETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getCompleted() {
    return completed;
  }


  @JsonProperty(JSON_PROPERTY_COMPLETED)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCompleted(@javax.annotation.Nonnull Boolean completed) {
    this.completed = completed;
  }


  public IncomingPayment incomingAmount(@javax.annotation.Nullable Amount1 incomingAmount) {
    this.incomingAmount = incomingAmount;
    return this;
  }

  /**
   * Get incomingAmount
   * @return incomingAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_INCOMING_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Amount1 getIncomingAmount() {
    return incomingAmount;
  }


  @JsonProperty(JSON_PROPERTY_INCOMING_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setIncomingAmount(@javax.annotation.Nullable Amount1 incomingAmount) {
    this.incomingAmount = incomingAmount;
  }


  public IncomingPayment receivedAmount(@javax.annotation.Nonnull Amount1 receivedAmount) {
    this.receivedAmount = receivedAmount;
    return this;
  }

  /**
   * Get receivedAmount
   * @return receivedAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECEIVED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Amount1 getReceivedAmount() {
    return receivedAmount;
  }


  @JsonProperty(JSON_PROPERTY_RECEIVED_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReceivedAmount(@javax.annotation.Nonnull Amount1 receivedAmount) {
    this.receivedAmount = receivedAmount;
  }


  public IncomingPayment expiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
    return this;
  }

  /**
   * The date and time when payments under this incoming payment will no longer be accepted.
   * @return expiresAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getExpiresAt() {
    return expiresAt;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiresAt(@javax.annotation.Nullable OffsetDateTime expiresAt) {
    this.expiresAt = expiresAt;
  }


  public IncomingPayment metadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Additional metadata associated with the incoming payment. (Optional)
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = metadata;
  }


  public IncomingPayment createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date and time when the incoming payment was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public IncomingPayment updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time when the incoming payment was updated.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  /**
   * Return true if this incoming-payment object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    IncomingPayment incomingPayment = (IncomingPayment) o;
    return Objects.equals(this.id, incomingPayment.id) &&
        Objects.equals(this.walletAddress, incomingPayment.walletAddress) &&
        Objects.equals(this.completed, incomingPayment.completed) &&
        Objects.equals(this.incomingAmount, incomingPayment.incomingAmount) &&
        Objects.equals(this.receivedAmount, incomingPayment.receivedAmount) &&
        Objects.equals(this.expiresAt, incomingPayment.expiresAt) &&
        Objects.equals(this.metadata, incomingPayment.metadata) &&
        Objects.equals(this.createdAt, incomingPayment.createdAt) &&
        Objects.equals(this.updatedAt, incomingPayment.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, walletAddress, completed, incomingAmount, receivedAmount, expiresAt, metadata, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class IncomingPayment {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    walletAddress: ").append(toIndentedString(walletAddress)).append("\n");
    sb.append("    completed: ").append(toIndentedString(completed)).append("\n");
    sb.append("    incomingAmount: ").append(toIndentedString(incomingAmount)).append("\n");
    sb.append("    receivedAmount: ").append(toIndentedString(receivedAmount)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `walletAddress` to the URL query string
    if (getWalletAddress() != null) {
      joiner.add(String.format("%swalletAddress%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWalletAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `completed` to the URL query string
    if (getCompleted() != null) {
      joiner.add(String.format("%scompleted%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCompleted()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `incomingAmount` to the URL query string
    if (getIncomingAmount() != null) {
      joiner.add(getIncomingAmount().toUrlQueryString(prefix + "incomingAmount" + suffix));
    }

    // add `receivedAmount` to the URL query string
    if (getReceivedAmount() != null) {
      joiner.add(getReceivedAmount().toUrlQueryString(prefix + "receivedAmount" + suffix));
    }

    // add `expiresAt` to the URL query string
    if (getExpiresAt() != null) {
      joiner.add(String.format("%sexpiresAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getExpiresAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(String.format("%smetadata%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMetadata()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `updatedAt` to the URL query string
    if (getUpdatedAt() != null) {
      joiner.add(String.format("%supdatedAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUpdatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

