/*
 * Open Payments Authorization Server
 * The Open Payments API is secured via [GNAP](https://datatracker.ietf.org/doc/html/draft-ietf-gnap-core-protocol). This specification describes the Open Payments Authorization Server API, which is an opinionated GNAP Server API.
 *
 * The version of the OpenAPI document: 1.2
 * Contact: tech@interledger.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fliqa.interledger.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.fliqa.interledger.client.model.AccessItem;
import java.net.URI;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.fliqa.interledger.ApiClient;
/**
 * A single access token or set of access tokens that the client instance can use to call the RS on behalf of the RO.
 */
@JsonPropertyOrder({
  AccessToken.JSON_PROPERTY_VALUE,
  AccessToken.JSON_PROPERTY_MANAGE,
  AccessToken.JSON_PROPERTY_EXPIRES_IN,
  AccessToken.JSON_PROPERTY_ACCESS
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class AccessToken {
  public static final String JSON_PROPERTY_VALUE = "value";
  @javax.annotation.Nonnull
  private String value;

  public static final String JSON_PROPERTY_MANAGE = "manage";
  @javax.annotation.Nonnull
  private URI manage;

  public static final String JSON_PROPERTY_EXPIRES_IN = "expires_in";
  @javax.annotation.Nullable
  private Integer expiresIn;

  public static final String JSON_PROPERTY_ACCESS = "access";
  @javax.annotation.Nonnull
  private Set<AccessItem> access = new LinkedHashSet<>();

  public AccessToken() { 
  }

  public AccessToken value(@javax.annotation.Nonnull String value) {
    this.value = value;
    return this;
  }

  /**
   * The value of the access token as a string.  The value is opaque to the client instance.  The value SHOULD be limited to ASCII characters to facilitate transmission over HTTP headers within other protocols without requiring additional encoding.
   * @return value
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getValue() {
    return value;
  }


  @JsonProperty(JSON_PROPERTY_VALUE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setValue(@javax.annotation.Nonnull String value) {
    this.value = value;
  }


  public AccessToken manage(@javax.annotation.Nonnull URI manage) {
    this.manage = manage;
    return this;
  }

  /**
   * The management URI for this access token. This URI MUST NOT include the access token value and SHOULD be different for each access token issued in a request.
   * @return manage
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_MANAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getManage() {
    return manage;
  }


  @JsonProperty(JSON_PROPERTY_MANAGE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setManage(@javax.annotation.Nonnull URI manage) {
    this.manage = manage;
  }


  public AccessToken expiresIn(@javax.annotation.Nullable Integer expiresIn) {
    this.expiresIn = expiresIn;
    return this;
  }

  /**
   * The number of seconds in which the access will expire.  The client instance MUST NOT use the access token past this time.  An RS MUST NOT accept an access token past this time.
   * @return expiresIn
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getExpiresIn() {
    return expiresIn;
  }


  @JsonProperty(JSON_PROPERTY_EXPIRES_IN)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setExpiresIn(@javax.annotation.Nullable Integer expiresIn) {
    this.expiresIn = expiresIn;
  }


  public AccessToken access(@javax.annotation.Nonnull Set<AccessItem> access) {
    this.access = access;
    return this;
  }

  public AccessToken addAccessItem(AccessItem accessItem) {
    if (this.access == null) {
      this.access = new LinkedHashSet<>();
    }
    this.access.add(accessItem);
    return this;
  }

  /**
   * A description of the rights associated with this access token.
   * @return access
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ACCESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Set<AccessItem> getAccess() {
    return access;
  }


  @JsonDeserialize(as = LinkedHashSet.class)
  @JsonProperty(JSON_PROPERTY_ACCESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setAccess(@javax.annotation.Nonnull Set<AccessItem> access) {
    this.access = access;
  }


  /**
   * Return true if this access_token object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AccessToken accessToken = (AccessToken) o;
    return Objects.equals(this.value, accessToken.value) &&
        Objects.equals(this.manage, accessToken.manage) &&
        Objects.equals(this.expiresIn, accessToken.expiresIn) &&
        Objects.equals(this.access, accessToken.access);
  }

  @Override
  public int hashCode() {
    return Objects.hash(value, manage, expiresIn, access);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AccessToken {\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("    manage: ").append(toIndentedString(manage)).append("\n");
    sb.append("    expiresIn: ").append(toIndentedString(expiresIn)).append("\n");
    sb.append("    access: ").append(toIndentedString(access)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `value` to the URL query string
    if (getValue() != null) {
      joiner.add(String.format("%svalue%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getValue()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `manage` to the URL query string
    if (getManage() != null) {
      joiner.add(String.format("%smanage%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getManage()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expires_in` to the URL query string
    if (getExpiresIn() != null) {
      joiner.add(String.format("%sexpires_in%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getExpiresIn()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `access` to the URL query string
    if (getAccess() != null) {
      int i = 0;
      for (AccessItem _item : getAccess()) {
        if (_item != null) {
          joiner.add(_item.toUrlQueryString(String.format("%saccess%s%s", prefix, suffix,
              "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix))));
        }
      }
      i++;
    }

    return joiner.toString();
  }
}

