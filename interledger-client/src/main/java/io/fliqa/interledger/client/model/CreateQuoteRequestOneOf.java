/*
 * Open Payments
 * The Open Payments API is a simple REST API with 4 resource types: **wallet address**, **quote**, **incoming payment** and **outgoing payment**.  The *service endpoint* for the API is always the URL of the wallet address resource and all other resources are sub-resources of the wallet address.  An incoming payment defines meta data that is automatically attached to payments made into the wallet address under that incoming payment. This facilitates automation of processes like reconciliation of payment into the wallet address with external systems.  An outgoing payment is an instruction to make a payment out of the wallet address.  A quote is a commitment from the Account Servicing Entity to deliver a particular amount to a receiver when sending a particular amount from the wallet address. It is only valid for a limited time.  All resource and collection resource representations use JSON and the media-type `application/json`.    The `wallet address` resource has three collections of sub-resources: 1. `/incoming-payments` contains the **incoming payment** sub-resources   2. `/outgoing-payments` contains the **outgoing payment** sub-resources   3. `/quotes` contains the **quote** sub-resources  Access to resources and permission to execute the methods exposed by the API is determined by the grants given to the client represented by an access token used in API requests.
 *
 * The version of the OpenAPI document: 1.4
 * Contact: tech@interledger.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fliqa.interledger.client.model;

import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fliqa.interledger.client.model.PaymentMethod;
import java.net.URI;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.fliqa.interledger.ApiClient;
/**
 * Create quote for an &#x60;receiver&#x60; that is an Incoming Payment with an &#x60;incomingAmount&#x60;
 */
@JsonPropertyOrder({
  CreateQuoteRequestOneOf.JSON_PROPERTY_WALLET_ADDRESS,
  CreateQuoteRequestOneOf.JSON_PROPERTY_RECEIVER,
  CreateQuoteRequestOneOf.JSON_PROPERTY_METHOD
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class CreateQuoteRequestOneOf extends HashMap<String, Object> {
  public static final String JSON_PROPERTY_WALLET_ADDRESS = "walletAddress";
  @javax.annotation.Nonnull
  private URI walletAddress;

  public static final String JSON_PROPERTY_RECEIVER = "receiver";
  @javax.annotation.Nonnull
  private URI receiver;

  public static final String JSON_PROPERTY_METHOD = "method";
  @javax.annotation.Nonnull
  private PaymentMethod method;

  public CreateQuoteRequestOneOf() { 
  }

  public CreateQuoteRequestOneOf walletAddress(@javax.annotation.Nonnull URI walletAddress) {
    this.walletAddress = walletAddress;
    return this;
  }

  /**
   * URL of a wallet address hosted by a Rafiki instance.
   * @return walletAddress
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WALLET_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getWalletAddress() {
    return walletAddress;
  }


  @JsonProperty(JSON_PROPERTY_WALLET_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setWalletAddress(@javax.annotation.Nonnull URI walletAddress) {
    this.walletAddress = walletAddress;
  }


  public CreateQuoteRequestOneOf receiver(@javax.annotation.Nonnull URI receiver) {
    this.receiver = receiver;
    return this;
  }

  /**
   * The URL of the incoming payment that is being paid.
   * @return receiver
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECEIVER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getReceiver() {
    return receiver;
  }


  @JsonProperty(JSON_PROPERTY_RECEIVER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReceiver(@javax.annotation.Nonnull URI receiver) {
    this.receiver = receiver;
  }


  public CreateQuoteRequestOneOf method(@javax.annotation.Nonnull PaymentMethod method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public PaymentMethod getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethod(@javax.annotation.Nonnull PaymentMethod method) {
    this.method = method;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   * @param key the name of the property
   * @param value the value of the property
   * @return self reference
   */
  @JsonAnySetter
  public CreateQuoteRequestOneOf putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) properties.
   * @return the additional (undeclared) properties
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   * @param key the name of the property
   * @return the additional (undeclared) property with the specified name
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }

  /**
   * Return true if this create_quote_request_oneOf object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateQuoteRequestOneOf createQuoteRequestOneOf = (CreateQuoteRequestOneOf) o;
    return Objects.equals(this.walletAddress, createQuoteRequestOneOf.walletAddress) &&
        Objects.equals(this.receiver, createQuoteRequestOneOf.receiver) &&
        Objects.equals(this.method, createQuoteRequestOneOf.method)&&
        Objects.equals(this.additionalProperties, createQuoteRequestOneOf.additionalProperties) &&
        super.equals(o);
  }

  @Override
  public int hashCode() {
    return Objects.hash(walletAddress, receiver, method, super.hashCode(), additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateQuoteRequestOneOf {\n");
    sb.append("    ").append(toIndentedString(super.toString())).append("\n");
    sb.append("    walletAddress: ").append(toIndentedString(walletAddress)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `walletAddress` to the URL query string
    if (getWalletAddress() != null) {
      joiner.add(String.format("%swalletAddress%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWalletAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `receiver` to the URL query string
    if (getReceiver() != null) {
      joiner.add(String.format("%sreceiver%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReceiver()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `method` to the URL query string
    if (getMethod() != null) {
      joiner.add(String.format("%smethod%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMethod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

