/*
 * Open Payments
 * The Open Payments API is a simple REST API with 4 resource types: **wallet address**, **quote**, **incoming payment** and **outgoing payment**.  The *service endpoint* for the API is always the URL of the wallet address resource and all other resources are sub-resources of the wallet address.  An incoming payment defines meta data that is automatically attached to payments made into the wallet address under that incoming payment. This facilitates automation of processes like reconciliation of payment into the wallet address with external systems.  An outgoing payment is an instruction to make a payment out of the wallet address.  A quote is a commitment from the Account Servicing Entity to deliver a particular amount to a receiver when sending a particular amount from the wallet address. It is only valid for a limited time.  All resource and collection resource representations use JSON and the media-type `application/json`.    The `wallet address` resource has three collections of sub-resources: 1. `/incoming-payments` contains the **incoming payment** sub-resources   2. `/outgoing-payments` contains the **outgoing payment** sub-resources   3. `/quotes` contains the **quote** sub-resources  Access to resources and permission to execute the methods exposed by the API is determined by the grants given to the client represented by an access token used in API requests.
 *
 * The version of the OpenAPI document: 1.4
 * Contact: tech@interledger.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fliqa.interledger.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fliqa.interledger.client.model.Amount1;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.fliqa.interledger.ApiClient;
/**
 * An **outgoing payment** resource represents a payment that will be, is currently being, or has previously been, sent from the wallet address.
 */
@JsonPropertyOrder({
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_ID,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_WALLET_ADDRESS,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_QUOTE_ID,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_FAILED,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_RECEIVER,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_RECEIVE_AMOUNT,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_DEBIT_AMOUNT,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_SENT_AMOUNT,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_GRANT_SPENT_DEBIT_AMOUNT,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_GRANT_SPENT_RECEIVE_AMOUNT,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_METADATA,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_CREATED_AT,
  OutgoingPaymentWithSpentAmounts.JSON_PROPERTY_UPDATED_AT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class OutgoingPaymentWithSpentAmounts {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private URI id;

  public static final String JSON_PROPERTY_WALLET_ADDRESS = "walletAddress";
  @javax.annotation.Nonnull
  private URI walletAddress;

  public static final String JSON_PROPERTY_QUOTE_ID = "quoteId";
  @javax.annotation.Nullable
  private URI quoteId;

  public static final String JSON_PROPERTY_FAILED = "failed";
  @javax.annotation.Nullable
  private Boolean failed = false;

  public static final String JSON_PROPERTY_RECEIVER = "receiver";
  @javax.annotation.Nonnull
  private URI receiver;

  public static final String JSON_PROPERTY_RECEIVE_AMOUNT = "receiveAmount";
  @javax.annotation.Nonnull
  private Amount1 receiveAmount;

  public static final String JSON_PROPERTY_DEBIT_AMOUNT = "debitAmount";
  @javax.annotation.Nonnull
  private Amount1 debitAmount;

  public static final String JSON_PROPERTY_SENT_AMOUNT = "sentAmount";
  @javax.annotation.Nonnull
  private Amount1 sentAmount;

  public static final String JSON_PROPERTY_GRANT_SPENT_DEBIT_AMOUNT = "grantSpentDebitAmount";
  @javax.annotation.Nullable
  private Amount1 grantSpentDebitAmount;

  public static final String JSON_PROPERTY_GRANT_SPENT_RECEIVE_AMOUNT = "grantSpentReceiveAmount";
  @javax.annotation.Nullable
  private Amount1 grantSpentReceiveAmount;

  public static final String JSON_PROPERTY_METADATA = "metadata";
  @javax.annotation.Nullable
  private Object metadata;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  @javax.annotation.Nonnull
  private OffsetDateTime updatedAt;

  public OutgoingPaymentWithSpentAmounts() { 
  }

  @JsonCreator
  public OutgoingPaymentWithSpentAmounts(
    @JsonProperty(JSON_PROPERTY_ID) URI id, 
    @JsonProperty(JSON_PROPERTY_WALLET_ADDRESS) URI walletAddress, 
    @JsonProperty(JSON_PROPERTY_QUOTE_ID) URI quoteId
  ) {
  this();
    this.id = id;
    this.walletAddress = walletAddress;
    this.quoteId = quoteId;
  }

  /**
   * The URL identifying the outgoing payment.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getId() {
    return id;
  }




  /**
   * The URL of the wallet address from which this payment is sent.
   * @return walletAddress
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WALLET_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getWalletAddress() {
    return walletAddress;
  }




  /**
   * The URL of the quote defining this payment&#39;s amounts.
   * @return quoteId
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_QUOTE_ID)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public URI getQuoteId() {
    return quoteId;
  }




  public OutgoingPaymentWithSpentAmounts failed(@javax.annotation.Nullable Boolean failed) {
    this.failed = failed;
    return this;
  }

  /**
   * Describes whether the payment failed to send its full amount.
   * @return failed
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Boolean getFailed() {
    return failed;
  }


  @JsonProperty(JSON_PROPERTY_FAILED)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFailed(@javax.annotation.Nullable Boolean failed) {
    this.failed = failed;
  }


  public OutgoingPaymentWithSpentAmounts receiver(@javax.annotation.Nonnull URI receiver) {
    this.receiver = receiver;
    return this;
  }

  /**
   * The URL of the incoming payment that is being paid.
   * @return receiver
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECEIVER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getReceiver() {
    return receiver;
  }


  @JsonProperty(JSON_PROPERTY_RECEIVER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReceiver(@javax.annotation.Nonnull URI receiver) {
    this.receiver = receiver;
  }


  public OutgoingPaymentWithSpentAmounts receiveAmount(@javax.annotation.Nonnull Amount1 receiveAmount) {
    this.receiveAmount = receiveAmount;
    return this;
  }

  /**
   * Get receiveAmount
   * @return receiveAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECEIVE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Amount1 getReceiveAmount() {
    return receiveAmount;
  }


  @JsonProperty(JSON_PROPERTY_RECEIVE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReceiveAmount(@javax.annotation.Nonnull Amount1 receiveAmount) {
    this.receiveAmount = receiveAmount;
  }


  public OutgoingPaymentWithSpentAmounts debitAmount(@javax.annotation.Nonnull Amount1 debitAmount) {
    this.debitAmount = debitAmount;
    return this;
  }

  /**
   * Get debitAmount
   * @return debitAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEBIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Amount1 getDebitAmount() {
    return debitAmount;
  }


  @JsonProperty(JSON_PROPERTY_DEBIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDebitAmount(@javax.annotation.Nonnull Amount1 debitAmount) {
    this.debitAmount = debitAmount;
  }


  public OutgoingPaymentWithSpentAmounts sentAmount(@javax.annotation.Nonnull Amount1 sentAmount) {
    this.sentAmount = sentAmount;
    return this;
  }

  /**
   * Get sentAmount
   * @return sentAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_SENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Amount1 getSentAmount() {
    return sentAmount;
  }


  @JsonProperty(JSON_PROPERTY_SENT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setSentAmount(@javax.annotation.Nonnull Amount1 sentAmount) {
    this.sentAmount = sentAmount;
  }


  public OutgoingPaymentWithSpentAmounts grantSpentDebitAmount(@javax.annotation.Nullable Amount1 grantSpentDebitAmount) {
    this.grantSpentDebitAmount = grantSpentDebitAmount;
    return this;
  }

  /**
   * Get grantSpentDebitAmount
   * @return grantSpentDebitAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GRANT_SPENT_DEBIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Amount1 getGrantSpentDebitAmount() {
    return grantSpentDebitAmount;
  }


  @JsonProperty(JSON_PROPERTY_GRANT_SPENT_DEBIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGrantSpentDebitAmount(@javax.annotation.Nullable Amount1 grantSpentDebitAmount) {
    this.grantSpentDebitAmount = grantSpentDebitAmount;
  }


  public OutgoingPaymentWithSpentAmounts grantSpentReceiveAmount(@javax.annotation.Nullable Amount1 grantSpentReceiveAmount) {
    this.grantSpentReceiveAmount = grantSpentReceiveAmount;
    return this;
  }

  /**
   * Get grantSpentReceiveAmount
   * @return grantSpentReceiveAmount
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_GRANT_SPENT_RECEIVE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Amount1 getGrantSpentReceiveAmount() {
    return grantSpentReceiveAmount;
  }


  @JsonProperty(JSON_PROPERTY_GRANT_SPENT_RECEIVE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setGrantSpentReceiveAmount(@javax.annotation.Nullable Amount1 grantSpentReceiveAmount) {
    this.grantSpentReceiveAmount = grantSpentReceiveAmount;
  }


  public OutgoingPaymentWithSpentAmounts metadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Additional metadata associated with the outgoing payment. (Optional)
   * @return metadata
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Object getMetadata() {
    return metadata;
  }


  @JsonProperty(JSON_PROPERTY_METADATA)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMetadata(@javax.annotation.Nullable Object metadata) {
    this.metadata = metadata;
  }


  public OutgoingPaymentWithSpentAmounts createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date and time when the outgoing payment was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OutgoingPaymentWithSpentAmounts updatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * The date and time when the outgoing payment was updated.
   * @return updatedAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdatedAt(@javax.annotation.Nonnull OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  /**
   * Return true if this outgoing-payment-with-spent-amounts object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OutgoingPaymentWithSpentAmounts outgoingPaymentWithSpentAmounts = (OutgoingPaymentWithSpentAmounts) o;
    return Objects.equals(this.id, outgoingPaymentWithSpentAmounts.id) &&
        Objects.equals(this.walletAddress, outgoingPaymentWithSpentAmounts.walletAddress) &&
        Objects.equals(this.quoteId, outgoingPaymentWithSpentAmounts.quoteId) &&
        Objects.equals(this.failed, outgoingPaymentWithSpentAmounts.failed) &&
        Objects.equals(this.receiver, outgoingPaymentWithSpentAmounts.receiver) &&
        Objects.equals(this.receiveAmount, outgoingPaymentWithSpentAmounts.receiveAmount) &&
        Objects.equals(this.debitAmount, outgoingPaymentWithSpentAmounts.debitAmount) &&
        Objects.equals(this.sentAmount, outgoingPaymentWithSpentAmounts.sentAmount) &&
        Objects.equals(this.grantSpentDebitAmount, outgoingPaymentWithSpentAmounts.grantSpentDebitAmount) &&
        Objects.equals(this.grantSpentReceiveAmount, outgoingPaymentWithSpentAmounts.grantSpentReceiveAmount) &&
        Objects.equals(this.metadata, outgoingPaymentWithSpentAmounts.metadata) &&
        Objects.equals(this.createdAt, outgoingPaymentWithSpentAmounts.createdAt) &&
        Objects.equals(this.updatedAt, outgoingPaymentWithSpentAmounts.updatedAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, walletAddress, quoteId, failed, receiver, receiveAmount, debitAmount, sentAmount, grantSpentDebitAmount, grantSpentReceiveAmount, metadata, createdAt, updatedAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OutgoingPaymentWithSpentAmounts {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    walletAddress: ").append(toIndentedString(walletAddress)).append("\n");
    sb.append("    quoteId: ").append(toIndentedString(quoteId)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    receiveAmount: ").append(toIndentedString(receiveAmount)).append("\n");
    sb.append("    debitAmount: ").append(toIndentedString(debitAmount)).append("\n");
    sb.append("    sentAmount: ").append(toIndentedString(sentAmount)).append("\n");
    sb.append("    grantSpentDebitAmount: ").append(toIndentedString(grantSpentDebitAmount)).append("\n");
    sb.append("    grantSpentReceiveAmount: ").append(toIndentedString(grantSpentReceiveAmount)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `walletAddress` to the URL query string
    if (getWalletAddress() != null) {
      joiner.add(String.format("%swalletAddress%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWalletAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `quoteId` to the URL query string
    if (getQuoteId() != null) {
      joiner.add(String.format("%squoteId%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getQuoteId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `failed` to the URL query string
    if (getFailed() != null) {
      joiner.add(String.format("%sfailed%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getFailed()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `receiver` to the URL query string
    if (getReceiver() != null) {
      joiner.add(String.format("%sreceiver%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReceiver()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `receiveAmount` to the URL query string
    if (getReceiveAmount() != null) {
      joiner.add(getReceiveAmount().toUrlQueryString(prefix + "receiveAmount" + suffix));
    }

    // add `debitAmount` to the URL query string
    if (getDebitAmount() != null) {
      joiner.add(getDebitAmount().toUrlQueryString(prefix + "debitAmount" + suffix));
    }

    // add `sentAmount` to the URL query string
    if (getSentAmount() != null) {
      joiner.add(getSentAmount().toUrlQueryString(prefix + "sentAmount" + suffix));
    }

    // add `grantSpentDebitAmount` to the URL query string
    if (getGrantSpentDebitAmount() != null) {
      joiner.add(getGrantSpentDebitAmount().toUrlQueryString(prefix + "grantSpentDebitAmount" + suffix));
    }

    // add `grantSpentReceiveAmount` to the URL query string
    if (getGrantSpentReceiveAmount() != null) {
      joiner.add(getGrantSpentReceiveAmount().toUrlQueryString(prefix + "grantSpentReceiveAmount" + suffix));
    }

    // add `metadata` to the URL query string
    if (getMetadata() != null) {
      joiner.add(String.format("%smetadata%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMetadata()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `updatedAt` to the URL query string
    if (getUpdatedAt() != null) {
      joiner.add(String.format("%supdatedAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUpdatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

