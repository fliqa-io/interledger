/*
 * Open Payments Authorization Server
 * The Open Payments API is secured via [GNAP](https://datatracker.ietf.org/doc/html/draft-ietf-gnap-core-protocol). This specification describes the Open Payments Authorization Server API, which is an opinionated GNAP Server API.
 *
 * The version of the OpenAPI document: 1.2
 * Contact: tech@interledger.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fliqa.interledger.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.net.URI;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.fliqa.interledger.ApiClient;
/**
 * Indicates how the client instance can receive an indication that interaction has finished at the AS.
 */
@JsonPropertyOrder({
  InteractRequestFinish.JSON_PROPERTY_METHOD,
  InteractRequestFinish.JSON_PROPERTY_URI,
  InteractRequestFinish.JSON_PROPERTY_NONCE
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class InteractRequestFinish {
  /**
   * The callback method that the AS will use to contact the client instance.
   */
  public enum MethodEnum {
    REDIRECT(String.valueOf("redirect"));

    private String value;

    MethodEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static MethodEnum fromValue(String value) {
      for (MethodEnum b : MethodEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_METHOD = "method";
  @javax.annotation.Nonnull
  private MethodEnum method;

  public static final String JSON_PROPERTY_URI = "uri";
  @javax.annotation.Nonnull
  private URI uri;

  public static final String JSON_PROPERTY_NONCE = "nonce";
  @javax.annotation.Nonnull
  private String nonce;

  public InteractRequestFinish() { 
  }

  public InteractRequestFinish method(@javax.annotation.Nonnull MethodEnum method) {
    this.method = method;
    return this;
  }

  /**
   * The callback method that the AS will use to contact the client instance.
   * @return method
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public MethodEnum getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethod(@javax.annotation.Nonnull MethodEnum method) {
    this.method = method;
  }


  public InteractRequestFinish uri(@javax.annotation.Nonnull URI uri) {
    this.uri = uri;
    return this;
  }

  /**
   * Indicates the URI that the AS will either send the RO to after interaction or send an HTTP POST request.
   * @return uri
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getUri() {
    return uri;
  }


  @JsonProperty(JSON_PROPERTY_URI)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUri(@javax.annotation.Nonnull URI uri) {
    this.uri = uri;
  }


  public InteractRequestFinish nonce(@javax.annotation.Nonnull String nonce) {
    this.nonce = nonce;
    return this;
  }

  /**
   * Unique value to be used in the calculation of the \&quot;hash\&quot; query parameter sent to the callback URI, must be sufficiently random to be unguessable by an attacker.  MUST be generated by the client instance as a unique value for this request.
   * @return nonce
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getNonce() {
    return nonce;
  }


  @JsonProperty(JSON_PROPERTY_NONCE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setNonce(@javax.annotation.Nonnull String nonce) {
    this.nonce = nonce;
  }


  /**
   * Return true if this interact_request_finish object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InteractRequestFinish interactRequestFinish = (InteractRequestFinish) o;
    return Objects.equals(this.method, interactRequestFinish.method) &&
        Objects.equals(this.uri, interactRequestFinish.uri) &&
        Objects.equals(this.nonce, interactRequestFinish.nonce);
  }

  @Override
  public int hashCode() {
    return Objects.hash(method, uri, nonce);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InteractRequestFinish {\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    uri: ").append(toIndentedString(uri)).append("\n");
    sb.append("    nonce: ").append(toIndentedString(nonce)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `method` to the URL query string
    if (getMethod() != null) {
      joiner.add(String.format("%smethod%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMethod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `uri` to the URL query string
    if (getUri() != null) {
      joiner.add(String.format("%suri%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getUri()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `nonce` to the URL query string
    if (getNonce() != null) {
      joiner.add(String.format("%snonce%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getNonce()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

