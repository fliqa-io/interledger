/*
 * Open Payments
 * The Open Payments API is a simple REST API with 4 resource types: **wallet address**, **quote**, **incoming payment** and **outgoing payment**.  The *service endpoint* for the API is always the URL of the wallet address resource and all other resources are sub-resources of the wallet address.  An incoming payment defines meta data that is automatically attached to payments made into the wallet address under that incoming payment. This facilitates automation of processes like reconciliation of payment into the wallet address with external systems.  An outgoing payment is an instruction to make a payment out of the wallet address.  A quote is a commitment from the Account Servicing Entity to deliver a particular amount to a receiver when sending a particular amount from the wallet address. It is only valid for a limited time.  All resource and collection resource representations use JSON and the media-type `application/json`.    The `wallet address` resource has three collections of sub-resources: 1. `/incoming-payments` contains the **incoming payment** sub-resources   2. `/outgoing-payments` contains the **outgoing payment** sub-resources   3. `/quotes` contains the **quote** sub-resources  Access to resources and permission to execute the methods exposed by the API is determined by the grants given to the client represented by an access token used in API requests.
 *
 * The version of the OpenAPI document: 1.4
 * Contact: tech@interledger.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package io.fliqa.interledger.client;

import io.fliqa.interledger.ApiClient;
import io.fliqa.interledger.ApiException;
import io.fliqa.interledger.ApiResponse;
import io.fliqa.interledger.Pair;

import io.fliqa.interledger.client.model.CreateQuoteRequest;
import io.fliqa.interledger.client.model.Quote;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;

import java.io.InputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.net.http.HttpRequest;
import java.nio.channels.Channels;
import java.nio.channels.Pipe;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;

import java.util.ArrayList;
import java.util.StringJoiner;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.function.Consumer;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class QuoteApi {
  private final HttpClient memberVarHttpClient;
  private final ObjectMapper memberVarObjectMapper;
  private final String memberVarBaseUri;
  private final Consumer<HttpRequest.Builder> memberVarInterceptor;
  private final Duration memberVarReadTimeout;
  private final Consumer<HttpResponse<InputStream>> memberVarResponseInterceptor;
  private final Consumer<HttpResponse<String>> memberVarAsyncResponseInterceptor;

  public QuoteApi() {
    this(new ApiClient());
  }

  public QuoteApi(ApiClient apiClient) {
    memberVarHttpClient = apiClient.getHttpClient();
    memberVarObjectMapper = apiClient.getObjectMapper();
    memberVarBaseUri = apiClient.getBaseUri();
    memberVarInterceptor = apiClient.getRequestInterceptor();
    memberVarReadTimeout = apiClient.getReadTimeout();
    memberVarResponseInterceptor = apiClient.getResponseInterceptor();
    memberVarAsyncResponseInterceptor = apiClient.getAsyncResponseInterceptor();
  }

  protected ApiException getApiException(String operationId, HttpResponse<InputStream> response) throws IOException {
    String body = response.body() == null ? null : new String(response.body().readAllBytes());
    String message = formatExceptionMessage(operationId, response.statusCode(), body);
    return new ApiException(response.statusCode(), message, response.headers(), body);
  }

  private String formatExceptionMessage(String operationId, int statusCode, String body) {
    if (body == null || body.isEmpty()) {
      body = "[no body]";
    }
    return operationId + " call failed with: " + statusCode + " - " + body;
  }

  /**
   * Create a Quote
   * A **quote** is a sub-resource of a wallet address. It represents a quote for a payment from the wallet address.
   * @param signatureInput  (required)
   * @param signature The signature generated based on the Signature-Input, using the signing algorithm specified in the \&quot;alg\&quot; field of the JWK. (required)
   * @param createQuoteRequest A subset of the quotes schema is accepted as input to create a new quote.  The quote must be created with a (&#x60;debitAmount&#x60; xor &#x60;receiveAmount&#x60;) unless the &#x60;receiver&#x60; is an Incoming Payment which has an &#x60;incomingAmount&#x60;. (required)
   * @return Quote
   * @throws ApiException if fails to make API call
   */
  public Quote createQuote(String signatureInput, String signature, CreateQuoteRequest createQuoteRequest) throws ApiException {
    ApiResponse<Quote> localVarResponse = createQuoteWithHttpInfo(signatureInput, signature, createQuoteRequest);
    return localVarResponse.getData();
  }

  /**
   * Create a Quote
   * A **quote** is a sub-resource of a wallet address. It represents a quote for a payment from the wallet address.
   * @param signatureInput  (required)
   * @param signature The signature generated based on the Signature-Input, using the signing algorithm specified in the \&quot;alg\&quot; field of the JWK. (required)
   * @param createQuoteRequest A subset of the quotes schema is accepted as input to create a new quote.  The quote must be created with a (&#x60;debitAmount&#x60; xor &#x60;receiveAmount&#x60;) unless the &#x60;receiver&#x60; is an Incoming Payment which has an &#x60;incomingAmount&#x60;. (required)
   * @return ApiResponse&lt;Quote&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Quote> createQuoteWithHttpInfo(String signatureInput, String signature, CreateQuoteRequest createQuoteRequest) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = createQuoteRequestBuilder(signatureInput, signature, createQuoteRequest);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("createQuote", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Quote>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Quote>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Quote>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder createQuoteRequestBuilder(String signatureInput, String signature, CreateQuoteRequest createQuoteRequest) throws ApiException {
    // verify the required parameter 'signatureInput' is set
    if (signatureInput == null) {
      throw new ApiException(400, "Missing the required parameter 'signatureInput' when calling createQuote");
    }
    // verify the required parameter 'signature' is set
    if (signature == null) {
      throw new ApiException(400, "Missing the required parameter 'signature' when calling createQuote");
    }
    // verify the required parameter 'createQuoteRequest' is set
    if (createQuoteRequest == null) {
      throw new ApiException(400, "Missing the required parameter 'createQuoteRequest' when calling createQuote");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/quotes";

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (signatureInput != null) {
      localVarRequestBuilder.header("Signature-Input", signatureInput.toString());
    }
    if (signature != null) {
      localVarRequestBuilder.header("Signature", signature.toString());
    }
    localVarRequestBuilder.header("Content-Type", "application/json");
    localVarRequestBuilder.header("Accept", "application/json");

    try {
      byte[] localVarPostBody = memberVarObjectMapper.writeValueAsBytes(createQuoteRequest);
      localVarRequestBuilder.method("POST", HttpRequest.BodyPublishers.ofByteArray(localVarPostBody));
    } catch (IOException e) {
      throw new ApiException(e);
    }
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

  /**
   * Get a Quote
   * A client can fetch the latest state of a quote.
   * @param signatureInput  (required)
   * @param signature The signature generated based on the Signature-Input, using the signing algorithm specified in the \&quot;alg\&quot; field of the JWK. (required)
   * @param id Sub-resource identifier (required)
   * @return Quote
   * @throws ApiException if fails to make API call
   */
  public Quote getQuote(String signatureInput, String signature, String id) throws ApiException {
    ApiResponse<Quote> localVarResponse = getQuoteWithHttpInfo(signatureInput, signature, id);
    return localVarResponse.getData();
  }

  /**
   * Get a Quote
   * A client can fetch the latest state of a quote.
   * @param signatureInput  (required)
   * @param signature The signature generated based on the Signature-Input, using the signing algorithm specified in the \&quot;alg\&quot; field of the JWK. (required)
   * @param id Sub-resource identifier (required)
   * @return ApiResponse&lt;Quote&gt;
   * @throws ApiException if fails to make API call
   */
  public ApiResponse<Quote> getQuoteWithHttpInfo(String signatureInput, String signature, String id) throws ApiException {
    HttpRequest.Builder localVarRequestBuilder = getQuoteRequestBuilder(signatureInput, signature, id);
    try {
      HttpResponse<InputStream> localVarResponse = memberVarHttpClient.send(
          localVarRequestBuilder.build(),
          HttpResponse.BodyHandlers.ofInputStream());
      if (memberVarResponseInterceptor != null) {
        memberVarResponseInterceptor.accept(localVarResponse);
      }
      try {
        if (localVarResponse.statusCode()/ 100 != 2) {
          throw getApiException("getQuote", localVarResponse);
        }
        if (localVarResponse.body() == null) {
          return new ApiResponse<Quote>(
              localVarResponse.statusCode(),
              localVarResponse.headers().map(),
              null
          );
        }

        String responseBody = new String(localVarResponse.body().readAllBytes());
        localVarResponse.body().close();

        return new ApiResponse<Quote>(
            localVarResponse.statusCode(),
            localVarResponse.headers().map(),
            responseBody.isBlank()? null: memberVarObjectMapper.readValue(responseBody, new TypeReference<Quote>() {})
        );
      } finally {
      }
    } catch (IOException e) {
      throw new ApiException(e);
    }
    catch (InterruptedException e) {
      Thread.currentThread().interrupt();
      throw new ApiException(e);
    }
  }

  private HttpRequest.Builder getQuoteRequestBuilder(String signatureInput, String signature, String id) throws ApiException {
    // verify the required parameter 'signatureInput' is set
    if (signatureInput == null) {
      throw new ApiException(400, "Missing the required parameter 'signatureInput' when calling getQuote");
    }
    // verify the required parameter 'signature' is set
    if (signature == null) {
      throw new ApiException(400, "Missing the required parameter 'signature' when calling getQuote");
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      throw new ApiException(400, "Missing the required parameter 'id' when calling getQuote");
    }

    HttpRequest.Builder localVarRequestBuilder = HttpRequest.newBuilder();

    String localVarPath = "/quotes/{id}"
        .replace("{id}", ApiClient.urlEncode(id.toString()));

    localVarRequestBuilder.uri(URI.create(memberVarBaseUri + localVarPath));

    if (signatureInput != null) {
      localVarRequestBuilder.header("Signature-Input", signatureInput.toString());
    }
    if (signature != null) {
      localVarRequestBuilder.header("Signature", signature.toString());
    }
    localVarRequestBuilder.header("Accept", "application/json");

    localVarRequestBuilder.method("GET", HttpRequest.BodyPublishers.noBody());
    if (memberVarReadTimeout != null) {
      localVarRequestBuilder.timeout(memberVarReadTimeout);
    }
    if (memberVarInterceptor != null) {
      memberVarInterceptor.accept(localVarRequestBuilder);
    }
    return localVarRequestBuilder;
  }

}
