/*
 * Open Payments Authorization Server
 * The Open Payments API is secured via [GNAP](https://datatracker.ietf.org/doc/html/draft-ietf-gnap-core-protocol). This specification describes the Open Payments Authorization Server API, which is an opinionated GNAP Server API.
 *
 * The version of the OpenAPI document: 1.2
 * Contact: tech@interledger.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fliqa.interledger.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fliqa.interledger.client.model.InteractRequestFinish;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.fliqa.interledger.ApiClient;
/**
 * The client instance declares the parameters for interaction methods that it can support using the interact field.
 */
@JsonPropertyOrder({
  InteractRequest.JSON_PROPERTY_START,
  InteractRequest.JSON_PROPERTY_FINISH
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class InteractRequest {
  /**
   * Gets or Sets start
   */
  public enum StartEnum {
    REDIRECT(String.valueOf("redirect"));

    private String value;

    StartEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static StartEnum fromValue(String value) {
      for (StartEnum b : StartEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_START = "start";
  @javax.annotation.Nonnull
  private List<StartEnum> start = new ArrayList<>();

  public static final String JSON_PROPERTY_FINISH = "finish";
  @javax.annotation.Nullable
  private InteractRequestFinish finish;

  public InteractRequest() { 
  }

  public InteractRequest start(@javax.annotation.Nonnull List<StartEnum> start) {
    this.start = start;
    return this;
  }

  public InteractRequest addStartItem(StartEnum startItem) {
    if (this.start == null) {
      this.start = new ArrayList<>();
    }
    this.start.add(startItem);
    return this;
  }

  /**
   * Indicates how the client instance can start an interaction.
   * @return start
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public List<StartEnum> getStart() {
    return start;
  }


  @JsonProperty(JSON_PROPERTY_START)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setStart(@javax.annotation.Nonnull List<StartEnum> start) {
    this.start = start;
  }


  public InteractRequest finish(@javax.annotation.Nullable InteractRequestFinish finish) {
    this.finish = finish;
    return this;
  }

  /**
   * Get finish
   * @return finish
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_FINISH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public InteractRequestFinish getFinish() {
    return finish;
  }


  @JsonProperty(JSON_PROPERTY_FINISH)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFinish(@javax.annotation.Nullable InteractRequestFinish finish) {
    this.finish = finish;
  }


  /**
   * Return true if this interact-request object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InteractRequest interactRequest = (InteractRequest) o;
    return Objects.equals(this.start, interactRequest.start) &&
        Objects.equals(this.finish, interactRequest.finish);
  }

  @Override
  public int hashCode() {
    return Objects.hash(start, finish);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InteractRequest {\n");
    sb.append("    start: ").append(toIndentedString(start)).append("\n");
    sb.append("    finish: ").append(toIndentedString(finish)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `start` to the URL query string
    if (getStart() != null) {
      for (int i = 0; i < getStart().size(); i++) {
        joiner.add(String.format("%sstart%s%s=%s", prefix, suffix,
            "".equals(suffix) ? "" : String.format("%s%d%s", containerPrefix, i, containerSuffix),
            URLEncoder.encode(ApiClient.valueToString(getStart().get(i)), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
      }
    }

    // add `finish` to the URL query string
    if (getFinish() != null) {
      joiner.add(getFinish().toUrlQueryString(prefix + "finish" + suffix));
    }

    return joiner.toString();
  }
}

