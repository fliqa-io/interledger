/*
 * Open Payments
 * The Open Payments API is a simple REST API with 4 resource types: **wallet address**, **quote**, **incoming payment** and **outgoing payment**.  The *service endpoint* for the API is always the URL of the wallet address resource and all other resources are sub-resources of the wallet address.  An incoming payment defines meta data that is automatically attached to payments made into the wallet address under that incoming payment. This facilitates automation of processes like reconciliation of payment into the wallet address with external systems.  An outgoing payment is an instruction to make a payment out of the wallet address.  A quote is a commitment from the Account Servicing Entity to deliver a particular amount to a receiver when sending a particular amount from the wallet address. It is only valid for a limited time.  All resource and collection resource representations use JSON and the media-type `application/json`.    The `wallet address` resource has three collections of sub-resources: 1. `/incoming-payments` contains the **incoming payment** sub-resources   2. `/outgoing-payments` contains the **outgoing payment** sub-resources   3. `/quotes` contains the **quote** sub-resources  Access to resources and permission to execute the methods exposed by the API is determined by the grants given to the client represented by an access token used in API requests.
 *
 * The version of the OpenAPI document: 1.4
 * Contact: tech@interledger.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.fliqa.interledger.client.model;

import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.StringJoiner;
import java.util.Objects;
import java.util.Map;
import java.util.HashMap;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.fliqa.interledger.client.model.Amount1;
import io.fliqa.interledger.client.model.PaymentMethod;
import java.net.URI;
import java.time.OffsetDateTime;
import java.util.Arrays;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;


import io.fliqa.interledger.ApiClient;
/**
 * A **quote** resource represents the quoted amount details with which an Outgoing Payment may be created.
 */
@JsonPropertyOrder({
  Quote.JSON_PROPERTY_ID,
  Quote.JSON_PROPERTY_WALLET_ADDRESS,
  Quote.JSON_PROPERTY_RECEIVER,
  Quote.JSON_PROPERTY_RECEIVE_AMOUNT,
  Quote.JSON_PROPERTY_DEBIT_AMOUNT,
  Quote.JSON_PROPERTY_METHOD,
  Quote.JSON_PROPERTY_EXPIRES_AT,
  Quote.JSON_PROPERTY_CREATED_AT
})
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.11.0")
public class Quote {
  public static final String JSON_PROPERTY_ID = "id";
  @javax.annotation.Nonnull
  private URI id;

  public static final String JSON_PROPERTY_WALLET_ADDRESS = "walletAddress";
  @javax.annotation.Nonnull
  private URI walletAddress;

  public static final String JSON_PROPERTY_RECEIVER = "receiver";
  @javax.annotation.Nonnull
  private URI receiver;

  public static final String JSON_PROPERTY_RECEIVE_AMOUNT = "receiveAmount";
  @javax.annotation.Nonnull
  private Amount1 receiveAmount;

  public static final String JSON_PROPERTY_DEBIT_AMOUNT = "debitAmount";
  @javax.annotation.Nonnull
  private Amount1 debitAmount;

  public static final String JSON_PROPERTY_METHOD = "method";
  @javax.annotation.Nonnull
  private PaymentMethod method;

  public static final String JSON_PROPERTY_EXPIRES_AT = "expiresAt";
  @javax.annotation.Nullable
  private String expiresAt;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  @javax.annotation.Nonnull
  private OffsetDateTime createdAt;

  public Quote() { 
  }

  @JsonCreator
  public Quote(
    @JsonProperty(JSON_PROPERTY_ID) URI id, 
    @JsonProperty(JSON_PROPERTY_WALLET_ADDRESS) URI walletAddress, 
    @JsonProperty(JSON_PROPERTY_EXPIRES_AT) String expiresAt
  ) {
  this();
    this.id = id;
    this.walletAddress = walletAddress;
    this.expiresAt = expiresAt;
  }

  /**
   * The URL identifying the quote.
   * @return id
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_ID)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getId() {
    return id;
  }




  /**
   * The URL of the wallet address from which this quote&#39;s payment would be sent.
   * @return walletAddress
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_WALLET_ADDRESS)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getWalletAddress() {
    return walletAddress;
  }




  public Quote receiver(@javax.annotation.Nonnull URI receiver) {
    this.receiver = receiver;
    return this;
  }

  /**
   * The URL of the incoming payment that is being paid.
   * @return receiver
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECEIVER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public URI getReceiver() {
    return receiver;
  }


  @JsonProperty(JSON_PROPERTY_RECEIVER)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReceiver(@javax.annotation.Nonnull URI receiver) {
    this.receiver = receiver;
  }


  public Quote receiveAmount(@javax.annotation.Nonnull Amount1 receiveAmount) {
    this.receiveAmount = receiveAmount;
    return this;
  }

  /**
   * Get receiveAmount
   * @return receiveAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_RECEIVE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Amount1 getReceiveAmount() {
    return receiveAmount;
  }


  @JsonProperty(JSON_PROPERTY_RECEIVE_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setReceiveAmount(@javax.annotation.Nonnull Amount1 receiveAmount) {
    this.receiveAmount = receiveAmount;
  }


  public Quote debitAmount(@javax.annotation.Nonnull Amount1 debitAmount) {
    this.debitAmount = debitAmount;
    return this;
  }

  /**
   * Get debitAmount
   * @return debitAmount
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_DEBIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Amount1 getDebitAmount() {
    return debitAmount;
  }


  @JsonProperty(JSON_PROPERTY_DEBIT_AMOUNT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDebitAmount(@javax.annotation.Nonnull Amount1 debitAmount) {
    this.debitAmount = debitAmount;
  }


  public Quote method(@javax.annotation.Nonnull PaymentMethod method) {
    this.method = method;
    return this;
  }

  /**
   * Get method
   * @return method
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public PaymentMethod getMethod() {
    return method;
  }


  @JsonProperty(JSON_PROPERTY_METHOD)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setMethod(@javax.annotation.Nonnull PaymentMethod method) {
    this.method = method;
  }


  /**
   * The date and time when the calculated &#x60;debitAmount&#x60; is no longer valid.
   * @return expiresAt
   */
  @javax.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_EXPIRES_AT)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getExpiresAt() {
    return expiresAt;
  }




  public Quote createdAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * The date and time when the quote was created.
   * @return createdAt
   */
  @javax.annotation.Nonnull
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(@javax.annotation.Nonnull OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  /**
   * Return true if this quote object is equal to o.
   */
  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Quote quote = (Quote) o;
    return Objects.equals(this.id, quote.id) &&
        Objects.equals(this.walletAddress, quote.walletAddress) &&
        Objects.equals(this.receiver, quote.receiver) &&
        Objects.equals(this.receiveAmount, quote.receiveAmount) &&
        Objects.equals(this.debitAmount, quote.debitAmount) &&
        Objects.equals(this.method, quote.method) &&
        Objects.equals(this.expiresAt, quote.expiresAt) &&
        Objects.equals(this.createdAt, quote.createdAt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, walletAddress, receiver, receiveAmount, debitAmount, method, expiresAt, createdAt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Quote {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    walletAddress: ").append(toIndentedString(walletAddress)).append("\n");
    sb.append("    receiver: ").append(toIndentedString(receiver)).append("\n");
    sb.append("    receiveAmount: ").append(toIndentedString(receiveAmount)).append("\n");
    sb.append("    debitAmount: ").append(toIndentedString(debitAmount)).append("\n");
    sb.append("    method: ").append(toIndentedString(method)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

  /**
   * Convert the instance into URL query string.
   *
   * @return URL query string
   */
  public String toUrlQueryString() {
    return toUrlQueryString(null);
  }

  /**
   * Convert the instance into URL query string.
   *
   * @param prefix prefix of the query string
   * @return URL query string
   */
  public String toUrlQueryString(String prefix) {
    String suffix = "";
    String containerSuffix = "";
    String containerPrefix = "";
    if (prefix == null) {
      // style=form, explode=true, e.g. /pet?name=cat&type=manx
      prefix = "";
    } else {
      // deepObject style e.g. /pet?id[name]=cat&id[type]=manx
      prefix = prefix + "[";
      suffix = "]";
      containerSuffix = "]";
      containerPrefix = "[";
    }

    StringJoiner joiner = new StringJoiner("&");

    // add `id` to the URL query string
    if (getId() != null) {
      joiner.add(String.format("%sid%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getId()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `walletAddress` to the URL query string
    if (getWalletAddress() != null) {
      joiner.add(String.format("%swalletAddress%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getWalletAddress()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `receiver` to the URL query string
    if (getReceiver() != null) {
      joiner.add(String.format("%sreceiver%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getReceiver()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `receiveAmount` to the URL query string
    if (getReceiveAmount() != null) {
      joiner.add(getReceiveAmount().toUrlQueryString(prefix + "receiveAmount" + suffix));
    }

    // add `debitAmount` to the URL query string
    if (getDebitAmount() != null) {
      joiner.add(getDebitAmount().toUrlQueryString(prefix + "debitAmount" + suffix));
    }

    // add `method` to the URL query string
    if (getMethod() != null) {
      joiner.add(String.format("%smethod%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getMethod()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `expiresAt` to the URL query string
    if (getExpiresAt() != null) {
      joiner.add(String.format("%sexpiresAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getExpiresAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    // add `createdAt` to the URL query string
    if (getCreatedAt() != null) {
      joiner.add(String.format("%screatedAt%s=%s", prefix, suffix, URLEncoder.encode(ApiClient.valueToString(getCreatedAt()), StandardCharsets.UTF_8).replaceAll("\\+", "%20")));
    }

    return joiner.toString();
  }
}

